5    {A,B,F}          2      15    3
6        {E}          2      20    1
7    {A,B,F}          3      10    3
8    {D,G,H}          4      10    3
9      {B,F}          4      20    2
10   {A,G,H}          4      25    3
items <- c({C,D},{A,B,C})
items <- c("C,D","A,B,C")
sequenceID = c(1,1)
eventID = c(10,15)
SIZE = c(2,3)
x <- data.frame(items,sequenceID,eventID,SIZE)
x
s1 <- cspade(x, parameter = list(support = 0.4), control = list(verbose = TRUE))
as(x,"transactions")
as.factor(sequenceID)
sequenceID
sequenceID <- as.factor(sequenceID)
sequenceID
eventID <- as.factor(eventID)
SIZE <- as.factor(SIZE)
x <- data.frame(items,sequenceID,eventID,SIZE)
s1 <- cspade(x, parameter = list(support = 0.4), control = list(verbose = TRUE))
as(x,"transactions")
s1 <- cspade(x, parameter = list(support = 0.4), control = list(verbose = TRUE))
str(x)
x<-as(x,"transactions")
s1 <- cspade(x, parameter = list(support = 0.4), control = list(verbose = TRUE))
x
summary(x)
x <- data.frame(items,sequenceID,eventID,SIZE)
x
View(x)
y<-as(x,"transactions")
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.9
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.9
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.9
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.8
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.7
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.2
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.8
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.8
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.9
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.9
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
# This code is to find the minimum n that satisfies the following two
# conditions simultanously
# P(Xn >or= x | n, R = 0.9) <or= 0.2    and   P(Xn >or= x | n, R = 0.95) >or= 0.8.
# where Xn is the number of successes in n trials.
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
Condition <- function (n, x) {
R1 <- 0.9
R2 <- 0.95
P1 <- 0
P2 <- 0
for (xn in x: n) {
P1 <- P1 + choose(n,xn) * R1^xn * (1-R1)^(n-xn)
P2 <- P2 + choose(n,xn) * R2^xn * (1-R2)^(n-xn)
}
Condition <- (P1<=0.2)&(P2>=0.8)
if (Condition) {print(P1)
print(P2)}
return(Condition)
}
n <- 0
FIND = FALSE
while (!FIND){
n <- n + 1
print(n)
for (x in 0 : n) {
if ( Condition(n,x) ) {
n_min <- n
corresponding_x <- x
FIND = TRUE
break
}
}
}
choose(10,2)
choose(3,2)
choose(2,2)
q()
head(Data)
```
rm(list=ls())
setwd("C:/Dropbox/Coursera/5ReproducibleResearch/RepData_PeerAssessment1")
Data<-read.csv("activity.csv")
head(Data)
View(Data)
library(ggplot2)
View(Data)
qplot(interval,steps,Data)
qplot(interval,steps,data=Data)
complete.cases(Data)
```{r}
library(dplyr)
setwd("C:/Dropbox/Coursera/5ReproducibleResearch/RepData_PeerAssessment1")
Data<-read.csv("activity.csv")
Data<-complete.cases(Data)
setwd("C:/Dropbox/Coursera/5ReproducibleResearch/RepData_PeerAssessment1")
Data<-read.csv("activity.csv")
Data<-Data[complete.cases(Data),]
head(Data)
library(dplyr)
library(ggplot2)
Data_group_by_date <- group_by(Data,date)
Data_mean_by_date<-summarize(Data_group_by_date, mean(steps))
View(Data_mean_by_date)
colnames(Data_mean_by_date)<-c("date","mean_step")
View(Data_mean_by_date)
colnames(Data_mean_by_date)<-c("date","total_step_number")
qplot(date,mean_step,data=Data_mean_by_date)+geom_histogram()
qplot(date,total_step_number,data=Data_mean_by_date)+geom_histogram()
qplot(date,total_step_number,data=Data_mean_by_date,geom="histogram")
_
The mean and median of the total number of steps taken per day
mean(Data_mean_by_date$mean_step)
str(Data_mean_by_date)
mean(Data_mean_by_date$mean_step)
Data_mean_by_date$mean_step
Data_mean_by_date
mean(Data_mean_by_date$total_step_number)
mean(Data_mean_by_date$total_step_number)
1.076618910^{4}
mean(Data_mean_by_date$total_step_number)
rm(list=ls())
library(dplyr)
library(ggplot2)
setwd("C:/Dropbox/Coursera/5ReproducibleResearch/RepData_PeerAssessment1")
Data<-read.csv("activity.csv")
Data<-Data[complete.cases(Data),]
head(Data)
Data_group_by_date <- group_by(Data,date)
Data_mean_by_date<-summarize(Data_group_by_date, sum(steps))
colnames(Data_mean_by_date)<-c("date","total_step_number_per_day")
qplot(total_step_number_per_day,data=Data_mean_by_date,geom="histogram")
mean(Data_mean_by_date$total_step_number)
View(Data_mean_by_date)
View(Data_group_by_date)
View(Data_group_by_date)
View(Data)
The median of the total number of steps taken per day is `r median(Data_mean_by_date$total_step_number)`
median(Data_mean_by_date$total_step_number)
mean(Data_mean_by_date$total_step_number)
The mean of the total number of steps taken per day is `r round(mean(Data_mean_by_date$total_step_number))`
Data_group_by_interval<-group_by(Data,interval)
View(Data_group_by_interval)
data_mean_by_interval<-summarize(Data_group_by_interval,mean(steps))
View(data_mean_by_interval)
qplot(aes(x=mean_step_number_by_interval,y=data=Data_mean_by_interval)+geom_line()
qplot(aes(x=mean_step_number_by_interval,y=data=Data_mean_by_interval))+geom_line()
qplot(aes(x=interval,y=mean_step_number_by_interval,data=Data_mean_by_interval))+geom_line()
qplot(Data_mean_by_interval,aes(x=interval,y=mean_step_number_by_interval))+geom_line()
Data_mean_by_interval<-summarize(Data_group_by_interval,mean(steps))
colnames(Data_mean_by_date)<-c("interval","mean_step_number_by_interval")
qplot(Data_mean_by_interval,aes(x=interval,y=mean_step_number_by_interval))+geom_line()
View(Data_mean_by_interval)
colnames(Data_mean_by_date)<-c("interval","mean_step_number_by_interval")
View(Data_mean_by_interval)
colnames(Data_mean_by_interval)<-c("interval","mean_step_number_by_interval")
qplot(Data_mean_by_interval,aes(x=interval,y=mean_step_number_by_interval))+geom_line()
Data_group_by_interval<-group_by(Data,interval)
Data_mean_by_interval<-summarize(Data_group_by_interval,mean(steps))
colnames(Data_mean_by_interval)<-c("interval","mean_step_number_by_interval")
qplot(Data_mean_by_interval,aes(x=interval,y=mean_step_number_by_interval))+geom_line()
qplot(Data_mean_by_interval, aes( x=interval, y=mean_step_number_by_interval) )
View(Data_mean_by_interval)
plot(Data_mean_by_interval$interval,Data_mean_by_interval$mean_step_number_by_interval)
gglot(Data_mean_by_interval, aes( x=interval, y=mean_step_number_by_interval) )+geom_line()
ggplot(Data_mean_by_interval, aes( x=interval, y=mean_step_number_by_interval) )+geom_line()
ggplot(Data_mean_by_interval, aes( x=interval, y=mean_step_number_by_interval) )+geom_line()
```
ggplot(Data_mean_by_interval, aes( x=interval, y=mean_step_number_by_interval) )+geom_line()
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
library(dplyr)
